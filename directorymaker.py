# -*- coding: utf-8 -*-
"""directorymaker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MnFAB48F8QamfhaU3MZdiMlB-ETUlNJl
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab Notebooks/datasets

import os
import shutil
import matplotlib.pyplot as plt
import numpy as np

picture_size = 256

LABEL = ['scooter', 'truck', 'bus', 'autorickshaw', 'bicycle', 'cars', 'bike', 'rickshaw']

FOLDER_PATH = {"source" : "/content/drive/MyDrive/Colab Notebooks/datasets/Kaggle/",
               "destination" : "/content/drive/MyDrive/Colab Notebooks/datasets/vehicle_detection/"
               }

SUB_FOLDER = os.listdir(FOLDER_PATH["source"])

vehicle_type = LABEL[-3]

class data_organizer():
    '''
    Methods:
        visualize: args:- vehicle_index: from vehicle labels
                   purpose:- let's you see raw data
        directory_form: args:- dir_: the names of directories to be formed
                        purpose:- to form directories, train and test by default
    '''
    def __init__(self,picture_size=256):
        self.picture_size = picture_size
        FOLDER_PATH = {"source" : "/content/drive/MyDrive/Colab Notebooks/datasets/Kaggle/",
                       "destination" : "/content/drive/MyDrive/Colab Notebooks/datasets/vehicle_detection/"
                       }
        SUB_FOLDER = os.listdir(FOLDER_PATH["source"])
        print("Found Following Categories: \n", SUB_FOLDER,"\n")
        self.LABEL = SUB_FOLDER
        
    def visualize(self, vehicle_index):
        #Visualizing dataset
        self.vehicle_type = self.LABEL[vehicle_index]
        self.image_paths = os.listdir(FOLDER_PATH["source"] + vehicle_type)

        plt.figure(figsize= (12,12))
        for i in range(1, 10, 1):
            plt.subplot(3,3,i)
            img = plt.imread(FOLDER_PATH["source"] + vehicle_type + '/' + self.image_paths[np.random.randint(0,len(self.image_paths))])
            plt.imshow(img)  
            # print(np.array(img).shape) 
        plt.show()
    
    def directory_form(self, dir_=("train","test")):
        self.dir_ = dir_
        for folder in self.dir_:
            path = os.path.join(FOLDER_PATH["destination"], folder)
            os.mkdir(path)
            for label in self.LABEL:
                sub_path = os.path.join(path,label)
                os.mkdir(sub_path)
                print("Made Directory: ", sub_path)
    def move_files(self, ratio=(0.8,)):
        self.ratio = ratio
        self.all_image_paths={}
        
        # Defining splits
        print("\nDefining splits", [a for a in ratio], sep=": ")
        self.train_split = self.ratio[0]
        if len(self.ratio) > 1:
            self.val_split = self.ratio[1]
            self.test_split = 1 - self.train_split - self.val_split
        else: self.test_split = 1 - self.train_split
            
        # Gathering image paths
        print("\nGathering image paths")
        for label in self.LABEL:
                img_paths = (os.listdir(FOLDER_PATH["source"] + label))
                length = len(img_paths)
                self.all_image_paths[label] = [length, img_paths]

        # Moving images                
        for folder in self.dir_:
            print("\nMoving images to ", folder)
            if folder == "train":  split = self.train_split
            elif folder == "test": split = self.test_split
            else: split = self.val_split
            
            path = os.path.join(FOLDER_PATH["destination"], folder)
            for label in self.LABEL:
                sub_path = os.path.join(path,label)
                self.all_image_paths[label][0]
                index = int(split*self.all_image_paths[label][0])
                print("Moving " + str(index) + " images into " + label)
                for img in self.all_image_paths[label][1][:index]:
                    source_file = FOLDER_PATH["source"] + label + "/" + img
                    destination_file = sub_path + "/" + img
                    shutil.move(source_file, destination_file)
                del self.all_image_paths[label][1][:index]
                
    def default_motion(self,):
        data.directory_form()
        data.move_files()

data = data_organizer()

# data.visualize(0)
# data.directory_form(("train","test","val"))
# data.move_files(ratio=(0.7,0.1))

data.default_motion()